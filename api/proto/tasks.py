# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: tasks_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib


class TaskType(betterproto.Enum):
    START_TRACKING = 0
    REVISIT_CHANNEL = 1


class TaskStatus(betterproto.Enum):
    PENDING = 0
    RUNNING = 1
    COMPLETED = 2
    FAILED = 3


@dataclass
class Task(betterproto.Message):
    task_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    task_type: "TaskType" = betterproto.enum_field(3)
    task_status: "TaskStatus" = betterproto.enum_field(4)


@dataclass
class CreateTaskRequest(betterproto.Message):
    channel_id: int = betterproto.int64_field(1)
    task_type: "TaskType" = betterproto.enum_field(2)


@dataclass
class CreateTaskWithUserNotificationRequest(betterproto.Message):
    channel_id: int = betterproto.int64_field(1)
    task_type: "TaskType" = betterproto.enum_field(2)
    user_id_to_notify: int = betterproto.int64_field(3)


@dataclass
class CreateTaskResponse(betterproto.Message):
    task_id: int = betterproto.int64_field(1)
    error_message: str = betterproto.string_field(2)


@dataclass
class GetTaskRequest(betterproto.Message):
    task_id: int = betterproto.int64_field(1)


@dataclass
class GetTaskResponse(betterproto.Message):
    task: "Task" = betterproto.message_field(1)
    error_message: str = betterproto.string_field(5)


@dataclass
class GetChannelTasksRequest(betterproto.Message):
    channel_id: int = betterproto.int64_field(1)


@dataclass
class GetChannelTasksResponse(betterproto.Message):
    tasks: List["Task"] = betterproto.message_field(1)
    error_message: str = betterproto.string_field(2)


class TasksServiceStub(betterproto.ServiceStub):
    async def create_task_with_user_notification(
        self,
        *,
        channel_id: int = 0,
        task_type: "TaskType" = 0,
        user_id_to_notify: int = 0,
    ) -> CreateTaskResponse:
        request = CreateTaskWithUserNotificationRequest()
        request.channel_id = channel_id
        request.task_type = task_type
        request.user_id_to_notify = user_id_to_notify

        return await self._unary_unary(
            "/tasks.TasksService/CreateTaskWithUserNotification",
            request,
            CreateTaskResponse,
        )

    async def create_task(
        self, *, channel_id: int = 0, task_type: "TaskType" = 0
    ) -> CreateTaskResponse:
        request = CreateTaskRequest()
        request.channel_id = channel_id
        request.task_type = task_type

        return await self._unary_unary(
            "/tasks.TasksService/CreateTask",
            request,
            CreateTaskResponse,
        )

    async def get_task(self, *, task_id: int = 0) -> GetTaskResponse:
        request = GetTaskRequest()
        request.task_id = task_id

        return await self._unary_unary(
            "/tasks.TasksService/GetTask",
            request,
            GetTaskResponse,
        )

    async def get_channel_tasks(
        self, *, channel_id: int = 0
    ) -> GetChannelTasksResponse:
        request = GetChannelTasksRequest()
        request.channel_id = channel_id

        return await self._unary_unary(
            "/tasks.TasksService/GetChannelTasks",
            request,
            GetChannelTasksResponse,
        )
