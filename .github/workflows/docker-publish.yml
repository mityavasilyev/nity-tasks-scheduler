name: Manual Version Increment and Docker Publish

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

env:
  REGISTRY: cr.yandex
  EXECUTOR_IMAGE_NAME: nity-tasks-executor
  SCHEDULER_IMAGE_NAME: nity-tasks-scheduler

jobs:
  bump-version-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures we fetch all history for versioning

      # Setup Python for version management
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install semver for version management
      - name: Install semver
        run: pip install semver

      # Bump version automatically based on user choice
      - name: Bump Version
        id: bump_version
        run: |
          # Get the latest tag, strip 'v' prefix if present, default to 0.0.0 if no tags exist
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 | sed 's/^v//' || echo "0.0.0")

          # Use Python's semver to increment version based on user choice
          NEW_VERSION=$(python3 -c '
          import semver
          try:
            version = semver.VersionInfo.parse("'"$LATEST_TAG"'")
            if "${{ github.event.inputs.version_type }}" == "major":
                new_version = version.bump_major()
            elif "${{ github.event.inputs.version_type }}" == "minor":
                new_version = version.bump_minor()
            else:  # patch
                new_version = version.bump_patch()
            print(str(new_version))
          except ValueError:
            print("1.0.0" if "${{ github.event.inputs.version_type }}" == "major" else "0.1.0" if "${{ github.event.inputs.version_type }}" == "minor" else "0.0.1")
          ')
          
          echo "Bumping version from $LATEST_TAG to $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # Create and push new tag
      - name: Create Git Tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "v${{ steps.bump_version.outputs.new_version }}"
          git push origin "v${{ steps.bump_version.outputs.new_version }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Authenticate with Yandex Container Registry using OAuth token
      - name: Login to Yandex Container Registry
        run: |
          echo "${{ secrets.YANDEX_OAUTH_TOKEN }}" | docker login \
            --username oauth \
            --password-stdin \
            cr.yandex

      - name: Build and push Docker image for nity-tasks-executor
        run: |
          docker build -f Dockerfile.scheduler -t ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.EXECUTOR_IMAGE_NAME }}:${{ steps.bump_version.outputs.new_version }} \
          -t ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.EXECUTOR_IMAGE_NAME }}:latest .

          docker push ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.EXECUTOR_IMAGE_NAME }}:${{ steps.bump_version.outputs.new_version }}

          docker push ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.EXECUTOR_IMAGE_NAME }}:latest

      - name: Build and push Docker image for nity-tasks-scheduler
        run: |
          docker build -f Dockerfile.executor -t ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.SCHEDULER_IMAGE_NAME }}:${{ steps.bump_version.outputs.new_version }} \
          -t ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.SCHEDULER_IMAGE_NAME }}:latest .

          docker push ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.SCHEDULER_IMAGE_NAME }}:${{ steps.bump_version.outputs.new_version }}

          docker push ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.SCHEDULER_IMAGE_NAME }}:latest

      # Create GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          body: |
            ## Manual Release (${{ github.event.inputs.version_type }})
            - Image: `${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.EXECUTOR_IMAGE_NAME }}:${{ steps.bump_version.outputs.new_version }}`
            - Image: `${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.SCHEDULER_IMAGE_NAME }}:${{ steps.bump_version.outputs.new_version }}`